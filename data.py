import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.io as pio
pio.renderers.default = "plotly_mimetype+notebook"


st.title('Анализ Данных Управления Развитием Сети Подсистемы RAN (Radio Access Network)')
df = pd.read_excel('edited-dataset.xlsx')
st.markdown(':orange[**1. Подготовить аналитику Плана развития сети (Rollout) по регионам по ключевым метрикам (определить самостоятельно).**]')
# Регион 1
region_a_data = df[df['Регион'] == 'R1']
region_name = 'R1'
# Выбираем метрики
metric_1 = 'Новая позиция утверждена П'
metric_2 = 'Заказ на закупку оборудования утвержден П'
metric_1_name = 'Количество позиций'
metric_2_name = 'Объём закупок'
# Используем Plotly Express для создания интерактивного графика scatter
fig = px.histogram(region_a_data, x=metric_1, title=f'Анализ {metric_1} в {region_name}', color_discrete_sequence=['blue'])
# Настройки графика
fig.update_layout(
    title=f'{metric_1_name} и {metric_2_name} в {region_name}',
    xaxis_title=metric_1,
    yaxis_title=metric_2
)
st.plotly_chart(fig)
# Добавляем текстовое описание для Региона 1
text_1 = '''
**Анализ Региона 1:**
    На графике представлен анализ количества новых позиций и объема закупок в Регионе 1. 
    Мы видим, что количество позиций, утвержденных в плане, сравнительно высоко в мае и июле. Однако, стоит обратить
    внимание на объем закупок в остальные месяца, в которых закупки практически отсутсвовали. Это может
    требовать дополнительного внимания и анализа для оптимизации стратегии закупок в данном регионе.
    Закупки также отсутвовали в определённые месяцы исходя из графика.
'''
st.markdown(text_1)

# Регион 2
region_a_data = df[df['Регион'] == 'R2']
region_name = 'R2'
# Используем Plotly Express для создания интерактивного графика scatter
fig = px.histogram(region_a_data, x=metric_1, title=f'Анализ {metric_1} в {region_name}', color_discrete_sequence=['skyblue'])
# Настройки графика
fig.update_layout(
    title=f'{metric_1_name} и {metric_2_name} в {region_name}',
    xaxis_title=metric_1,
    yaxis_title=metric_2
)
st.plotly_chart(fig)
# Добавляем текстовое описание для Региона 1
text_2 = '''
**Анализ Региона 2:**
    На графике представлен анализ количества новых позиций и объема закупок в Регионе 2. 
    Мы видим, что количество позиций, утвержденных в плане, сравнительно высоко в мае и июле. Однако, стоит обратить
    внимание на объем закупок в остальные месяца. внимание на объем закупок, так как наблюдаются всплески и изменения в течение периода.
    Закупки также отсутвовали в определённые месяцы исходя из графика.
'''
st.markdown(text_2)

# Регион 3
region_a_data = df[df['Регион'] == 'R3']
region_name = 'R3'
# Используем Plotly Express для создания интерактивного графика scatter
fig = px.histogram(region_a_data, x=metric_1, title=f'Анализ {metric_1} в {region_name}', color_discrete_sequence=['red'])
# Настройки графика
fig.update_layout(
    title=f'{metric_1_name} и {metric_2_name} в {region_name}',
    xaxis_title=metric_1,
    yaxis_title=metric_2
)
st.plotly_chart(fig)
text_3 = '''
**Анализ Региона 3:**
Данный график отражает количество новых позиций в Регионе 3. На первый взгляд, мы видим, что
    в определенные месяцы наблюдаются существенные изменения. Это может свидетельствовать о сезонных
    или циклических колебаниях в утверждении новых позиций. Рекомендуется дополнительный анализ и
    выявление факторов, влияющих на такие колебания. Но в то же время колебание происходит лишь в мае и июле 2022(но не в 2021), остальные месяца кажутся пассивными.
    Выявить сезонность на основе таких фактов мы не можем.
'''
st.markdown(text_3)
# Регион 4
region_a_data = df[df['Регион'] == 'R4']
region_name = 'R4'
# Используем Plotly Express для создания интерактивного графика scatter
fig = px.histogram(region_a_data, x=metric_1, title=f'Анализ {metric_1} в {region_name}', color_discrete_sequence=['lightcoral'])
# Настройки графика
fig.update_layout(
    title=f'{metric_1_name} и {metric_2_name} в {region_name}',
    xaxis_title=metric_1,
    yaxis_title=metric_2
)
st.plotly_chart(fig)
text_4 = '''
**Анализ Региона 4:**
Максимальное количество позиций: 40. Это намного меньше, чем  других регионах. Но в то же время закупки в регионе стабильны. Минимальное количество позиций: в январе, марте и мае. Здесь наблюдается наименьшая активность в утверждении новых позиций. Возможно, в данном периоде была более спокойная работа или низкая потребность в закупках.
Закупки также отсутвовали в определённые месяцы исходя из графика.
Но в то же время колебание происходит в мае - сентябре 2021 и 2022, остальные месяца кажутся пассивными. В данном случае мы
можем говорить о возможной сезонности.
'''
st.markdown(text_4)

# Регион 5
region_a_data = df[df['Регион'] == 'R5']
region_name = 'R5'
# Используем Plotly Express для создания интерактивного графика scatter
fig = px.histogram(region_a_data, x=metric_1, title=f'Анализ {metric_1} в {region_name}', color_discrete_sequence=['darkturquoise'])
# Настройки графика
fig.update_layout(
    title=f'{metric_1_name} и {metric_2_name} в {region_name}',
    xaxis_title=metric_1,
    yaxis_title=metric_2
)
st.plotly_chart(fig)
text_5 = '''
**Анализ Региона 5:**
В июле 2022 наблюдаются существенные изменения. Это единственный месяц с достаточно высокой активностью, также есть движение графика после сентября 2022.
Такие показатели не могут свидетельствовать о сезонных или циклических колебаниях в утверждении новых позиций.
'''
st.markdown(text_5)

# 1.1
# Выберите метрику и её название
metric_1 = 'Новая позиция утверждена П'
metric_1_name = 'Количество позиций'
# Выберите цветовую колонку
color_column = 'Регион'
# Создайте бокс-график с Plotly Express
fig = px.box(df, color=color_column, x=color_column, y=metric_1, title=f'Сравнение метрики "{metric_1_name}" по регионам')
# Выведите график с помощью Streamlit
st.plotly_chart(fig)

text_6 = '''
Результаты показывают, как количество позиций в различных регионах соотносится между собой. 

На графике видно несколько коробок, каждая из которых представляет один регион. Высота каждой коробки отражает значения метрики "Количество позиций" для соответствующего региона. Чем выше коробка, тем больше значение метрики в данном регионе. 

Цветовая колонка "Регион" позволяет визуально сравнивать значения метрики между регионами. Каждый регион обозначен своим цветом, что позволяет быстро определить, в каком регионе значение метрики выше или ниже.

Таким образом, график дает общее представление о распределении значения метрики "Количество позиций" по разным регионам и позволяет выявить потенциальные различия и тренды среди них.

Показатели региона 4 кажутся выше всех остальных регионов. Данный регион обгоняет все остальные по объём позиций, представленных каждый месяц, но в то же время, несмотря на частоту закупок и обновлений, сами значения ниже, чем в других регионах 
(если сравнить максимумы за месяц).
'''
st.markdown(text_6)

# 1.2
metric_2 = 'Заказ на закупку оборудования утвержден П'
metric_2_name = 'Объём закупок'
fig = px.box(df, x='Регион', y=metric_2, title=f'Сравнение метрики "{metric_2_name}" по регионам', color=color_column)
st.plotly_chart(fig)

text_6_2 = '''
Результаты показывают сравнение метрики "Объём закупок" по регионам в виде бокс-графика. Каждая коробка на графике представляет один регион, а высота коробки отражает значения метрики. Цветовая колонка "Регион" используется для наглядного сравнения метрики между регионами. Заказ на закупку оборудования утвержден П.

'''
st.markdown(text_6_2)

# 1 - ПРОПУЩЕННЫЕ ЗНАЧЕНИЯ
palette = ["#E5E5E5", "lightcoral"]
st.set_option('deprecation.showPyplotGlobalUse', False)
# Список метрик
metrics = [
    ('Новая позиция утверждена П', 'План'),
    ('Новая позиция утверждена Ф', 'Факт'),
    ('Заявка на закупку оборудования утверждена П', 'План'),
    ('Заказ на закупку оборудования утвержден Ф', 'План'),
    ('Договор аренды подписан П', 'План'),
    ('Начало проектно-изыскательных работ П', 'План'),
    ('Согласование планировок размещения оборудования П', 'План'),
    ('Начало строительно-монтажных работ П', 'План'),
    ('Завершение строительных работ П', 'План'),
    ('Комплект оборудования поставлен П', 'План'),
    ('Комплект оборудования выдан подрядчику П', 'План'),
    ('Прогноз интеграции в сеть П', 'План'),
    ('Интеграция в сеть П', 'План'),
    ('Интеграция в сеть Ф', 'Факт'),
    ('Монтаж оборудования БС завершен Ф', 'Факт'),
]

# Создание подходящего формата DataFrame для анализа
analytical_df = df.copy()
for metric, plan_fact in metrics:
    # Создание колонок для каждой метрики и ее фазы (План/Факт)
    col_plan = f'{metric}_{plan_fact}_План'
    col_fact = f'{metric}_{plan_fact}_Факт'
    # Если есть данные по Плану, добавляем их в аналитический DataFrame
    if col_plan in df.columns:
        analytical_df[col_plan] = df[col_plan]
    # Если есть данные по Факту, добавляем их в аналитический DataFrame
    if col_fact in df.columns:
        analytical_df[col_fact] = df[col_fact]

st.write('**Пропущенные значения в аналитическом DataFrame**')
# Визуализация пропущенных значений, если есть хотя бы одно значение, отличное от NaN
if not analytical_df.isnull().all().all():
    plt.figure(figsize=(16, 10))
    sns.heatmap(analytical_df.isnull(), cmap=palette, cbar=False, yticklabels=False)
    st.pyplot()
else:
    print('Нет данных для отображения пропущенных значений.')
# Строим графики для каждой метрики (может потребоваться рефакторинг в зависимости от метрик)
for metric, plan_fact in metrics:
    col_plan = f'{metric}_{plan_fact}_План'
    col_fact = f'{metric}_{plan_fact}_Факт'
    if col_plan in analytical_df.columns:
        plt.figure(figsize=(14, 6))
        sns.lineplot(data=analytical_df[[col_plan, col_fact]])
        plt.title(f'Анализ {metric} ({plan_fact})')
        plt.xlabel('Индекс записи')
        plt.ylabel('Дата')
        st.pyplot()
text_7 = '''
Выше на графиках отсутствовали значения для многих регионов. В данном датасете, действительно, большое количество пропусков, которые не позволяют провести полноценный анализ. Пропуски в подобных таблицах не заполняются, так как это данные записанные системы. Именно поэтому пропуски не рассматриваются при анализе.
'''
st.markdown(text_7)

# Выбираем нужные столбцы для анализа
gantt_data = df[['Базовая станция', 'Начало проектно-изыскательных работ П', 'Завершение строительных работ П', 'Регион']]
# Убираем строки, в которых отсутствует хотя бы одна дата
gantt_data = gantt_data.dropna(subset=['Начало проектно-изыскательных работ П', 'Завершение строительных работ П'])
# Вычисляем временной интервал в месяцах
gantt_data['Временной интервал (месяцы)'] = (gantt_data['Завершение строительных работ П'] - gantt_data['Начало проектно-изыскательных работ П']) / pd.Timedelta(days=30)
# Строим гистограмму временных интервалов в месяцах
fig = px.histogram(gantt_data, x='Временной интервал (месяцы)', color=color_column, nbins=30,
                  labels={'Временной интервал (месяцы)': 'Временной интервал (месяцы)'},
                  title='Распределение временных интервалов в месяцах между началом проектно-изыскательных и завершением строительных работ')
# Настройка макета графика
fig.update_layout(xaxis_title='Временной интервал (месяцы)', yaxis_title='Количество объектов')
st.plotly_chart(fig)

text_8 = '''
Результаты показывают распределение временных интервалов в месяцах между началом проектно-изыскательных и завершением строительных работ для разных объектов базовых станций. 

На гистограмме видно, сколько объектов базовых станций имеют определенный временной интервал между этими двуми событиями. Ось x отображает временной интервал в месяцах, а ось y показывает количество объектов.

График также использует цветовую колонку "Регион" для визуального сравнения распределения временных интервалов между регионами.

Таким образом, график помогает понять, как длительность проектно-изыскательных и строительных работ различается между объектами базовых станций, а также между разными регионами. Это может быть полезной информацией при планировании и управлении проектами и временными ресурсами.

'''
st.markdown(text_8)

st.markdown(':orange[**2. Построить накопительный (по месяцам) график строительства БС по регионам/филиалам (по БС и сайтам). Основа – КТ «Интеграция в сеть». Вид: сводная таблица.**]')
# 2.1
cumulative_data = df.groupby([df['Начало строительно-монтажных работ П'].dt.to_period("M"), 'Регион'])['Базовая станция'].nunique().groupby(level=0).cumsum()
# Pivot the data for plotting
cumulative_data_pivot = cumulative_data.reset_index().pivot(index='Начало строительно-монтажных работ П', columns='Регион', values='Базовая станция')
# Plot the cumulative construction graph
plt.figure(figsize=(12, 8))
cumulative_data_pivot.plot(marker='o', linestyle='-', ax=plt.gca())
st.write('**Накопительный график строительства базовых станций по регионам (ежемесячно)**')
plt.xlabel('Месяц')
plt.ylabel('Накопительное количество базовых станций')
plt.legend(title='Регион')
st.set_option('deprecation.showPyplotGlobalUse', False)
st.pyplot()
text_9 = '''
На данном графике представлен накопительный характер строительства базовых станций в различных регионах. Каждая точка на линии представляет собой накопленное количество базовых станций к определенному месяцу. Из графика видно, что регионы развиваются с различной скоростью, и некоторые могут иметь более активное строительство в определенные периоды.
'''
st.markdown(text_9)

# 2.2
# Выберем нужные столбцы
selected_columns = ['Регион', 'Филиал', 'Базовая станция', 'Прогноз интеграции в сеть П']
# Уберем строки с пропущенными значениями в столбце 'Прогноз интеграции в сеть П'
gantt_data = df[selected_columns].dropna(subset=['Прогноз интеграции в сеть П'])
# Отсортируем DataFrame по времени прогноза интеграции
gantt_data = gantt_data.sort_values(by='Прогноз интеграции в сеть П')
# Создадим сводную таблицу для накопительного графика
cumulative_df = gantt_data.groupby(['Прогноз интеграции в сеть П', 'Регион']).size().reset_index(name='Количество')
# Добавим столбец с накопленными значениями
cumulative_df['Накопленное количество'] = cumulative_df.groupby('Регион')['Количество'].cumsum()
# Строим график
fig = px.bar(cumulative_df, x='Прогноз интеграции в сеть П', y='Накопленное количество',
            color='Регион', labels={'Накопленное количество': 'Общее количество', 'Прогноз интеграции в сеть П': 'Дата прогноза'},
            title='Накопительный график строительства БС по регионам',
            height=600)
# Настройка макета графика
fig.update_layout(xaxis_title='Дата прогноза', yaxis_title='Общее количество', showlegend=True)
# Отображаем график
st.plotly_chart(fig)
text_10 = '''
Данный график демонстрирует накопление базовых станций по регионам в зависимости от прогнозируемой даты интеграции в сеть. Каждый столбец представляет регион, а высота столбца соответствует общему накопленному количеству базовых станций к моменту прогноза. График позволяет сравнить темпы строительства между разными регионами и выявить те, которые достигают значительного прогресса.
'''
st.markdown(text_10)
# 2.3
cumulative_data_2 = df.groupby([df['Начало строительно-монтажных работ П'].dt.to_period("M"), 'Филиал'])['Базовая станция'].nunique().groupby(level=0).cumsum()
# Pivot the data for plotting
cumulative_data_pivot_2 = cumulative_data_2.reset_index().pivot(index='Начало строительно-монтажных работ П', columns='Филиал', values='Базовая станция')
# Plot the cumulative construction graph
plt.figure(figsize=(12, 8))
cumulative_data_pivot_2.plot(marker='o', linestyle='-', ax=plt.gca())
st.write('**Накопительный график строительства базовых станций по филиалам (ежемесячно)**')
plt.xlabel('Месяц')
plt.ylabel('Накопительное количество базовых станций')
plt.legend(title='Филиал')
st.pyplot()
text_10 ='''
Данный график представляет накопленное количество базовых станций по различным филиалам в зависимости от времени. Каждая линия на графике представляет отдельный филиал, а каждая точка на линии отображает общее количество базовых станций, построенных к определенному месяцу. Анализ этого графика позволяет оценить эффективность строительства в каждом филиале и выделить те, которые демонстрируют более высокую динамику.
'''
st.markdown(text_10)
# 2.4
# Создадим сводную таблицу для накопительного графика
cumulative_df_2 = gantt_data.groupby(['Прогноз интеграции в сеть П', 'Филиал']).size().reset_index(name='Количество')
# Добавим столбец с накопленными значениями
cumulative_df_2['Накопленное количество'] = cumulative_df_2.groupby('Филиал')['Количество'].cumsum()
# Строим график
fig = px.bar(cumulative_df_2, x='Прогноз интеграции в сеть П', y='Накопленное количество',
            color='Филиал', labels={'Накопленное количество': 'Общее количество', 'Прогноз интеграции в сеть П': 'Дата прогноза'},
            title='Накопительный график строительства БС по филиалам',
            height=600)

# Настройка макета графика
fig.update_layout(xaxis_title='Дата прогноза', yaxis_title='Общее количество', showlegend=True)
# Отображаем график
st.plotly_chart(fig)
text_11 = '''
График представляет накопленное количество базовых станций в различных филиалах в зависимости от прогнозируемой даты интеграции в сеть. Каждый столбец на графике соответствует филиалу, а высота столбца показывает общее количество базовых станций, построенных к моменту прогноза. Этот график помогает выделить наилучшие практики и тенденции в строительстве базовых станций в различных филиалах.'''
st.markdown(text_11)

st.markdown(':orange[**3. Сравнить план и прогноз интеграций (КТ «Прогноз интеграции в сеть») по регионам. Вид: сводная диаграмма с возможностью фильтрации по регионам.**]')
# 3.1
df['Интеграция в сеть по плану'] = df['Интеграция в сеть Ф'] < df['Интеграция в сеть П']
# Преобразовываем df['Интеграция в сеть по плану'] в тип данных boolean
df['Интеграция в сеть по плану'] = df['Интеграция в сеть по плану'].astype(bool)
# Группировка по 'Регион' и подсчёт количества значений True и False
region_counts = df.groupby('Регион')['Интеграция в сеть по плану'].value_counts().unstack().fillna(0)
# Строим столбчатую диаграмму
region_counts.plot(kind='bar', stacked=True)
st.write('**Распределение интеграции в сеть по плану по регионам**')
# Настройка легенды и меток
plt.legend(['Не по плану', 'По плану'], title='Интеграция по плану')
plt.xlabel('Регион')
plt.ylabel('Количество')
# Показываем график
st.pyplot()

# 3.2
# Выбираем нужные столбцы
df_dates = df[['Регион', 'Прогноз интеграции в сеть П', 'Интеграция в сеть П']]
# Строим сводную диаграмму с Plotly
fig = px.scatter(df_dates, x='Прогноз интеграции в сеть П', y='Интеграция в сеть П', color='Регион',
                labels={'Прогноз интеграции в сеть П': 'Прогноз интеграции в сеть',
                        'Интеграция в сеть П': 'Интеграция в сеть',
                        'Регион': 'Регион'})
# Отображаем график
st.plotly_chart(fig)

text_13 = '''
Анализ на основе предоставленной таблицы показывает количество случаев отставания от плановых сроков интеграции в сеть по регионам.
Рассмотрим каждый регион по отдельности:

- В регионе R1 наблюдается 901 случай отставания от плана и 156 случаев выполнения интеграции по плану. Это указывает на значительную долю случаев отставания от плана в этом регионе.

- В регионе R2 наблюдается 280 случаев отставания от плана и 174 случая выполнения интеграции по плану. Это также указывает на значительное отставание от плана в этом регионе.

- В регионе R3 наблюдается 1353 случая отставания от плана и 635 случаев выполнения интеграции по плану. Это говорит о том, что в этом регионе отставание от плановых сроков интеграции в сеть существенно преобладает.

- В регионе R4 наблюдается 59 случаев отставания от плана и 86 случаев выполнения интеграции по плану. Это указывает на некоторую долю отставания от плана, но в меньшей степени по сравнению с другими регионами.

- В регионе R5 есть 6 случаев выполнения интеграции по плану и 170 случаев отставания от плана. Это также указывает на значительную долю случаев отставания от плана в этом регионе.

Исходя из этих данных, можно сделать вывод, что отставание от плана интеграции в сеть является проблемой практически во всех регионах, хотя уровень отставания может варьироваться. Для улучшения результатов интеграции в сеть необходимо изучить причины отставания и разработать меры для повышения эффективности процесса интеграции.
'''
st.markdown(text_13)

st.markdown(':orange[**4. Определить филиалы с отставанием от плановых сроков интеграции (по БС и сайтам).**]')
st.write('**Распределение интеграции в сеть по плану по филиалам**')
# Преобразовываем df['Интеграция в сеть по плану'] в тип данных boolean
df['Интеграция в сеть по плану'] = df['Интеграция в сеть по плану'].astype(bool)
# Группировка по 'Регион' и подсчёт количества значений True и False
region_counts = df.groupby('Филиал')['Интеграция в сеть по плану'].value_counts().unstack().fillna(0)
# Строим столбчатую диаграмму
region_counts.plot(kind='bar', stacked=True)
# Настройка легенды и меток
plt.legend(['Не по плану', 'По плану'], title='Интеграция в сеть по плану')
plt.xlabel('Филиал')
plt.ylabel('Количество')
# Показываем график
st.pyplot()
st.set_option('deprecation.showPyplotGlobalUse', False)

# 4.1
# Выберем нужные столбцы
selected_columns = ['Регион', 'Филиал', 'Базовая станция', 'Прогноз интеграции в сеть П', 'Интеграция в сеть П']
# Уберем строки с пропущенными значениями в столбцах с датами
integration_data = df[selected_columns].dropna(subset=['Прогноз интеграции в сеть П', 'Интеграция в сеть П'])
# Определим отставание от плана
integration_data['Отставание'] = (integration_data['Интеграция в сеть П'] - integration_data['Прогноз интеграции в сеть П']).dt.days
# Выберем филиалы с отставанием от плана
delayed_filials = integration_data[integration_data['Отставание'] > 0] 
fig = px.bar(delayed_filials, x='Филиал', y='Отставание', color='Регион',
            title='Отставание от плановых сроков интеграции по филиалам и регионам',
            labels={'Отставание': 'Отставание от плана (дни)', 'Филиал': 'Филиал'},
            category_orders={'Филиал': delayed_filials['Филиал'].unique()})
# Настройка макета графика
fig.update_layout(xaxis_title='Филиал', yaxis_title='Отставание от плана (дни)',
                  legend_title='Регион')
fig.update_traces(dict(marker_line_width=0))
# Отображаем график
st.plotly_chart(fig)

text_12 = '''
Полученная таблица представляет собой сводную информацию об отставании от плановых сроков интеграции по филиалам и регионам. В каждой ячейке указана суммарная продолжительность отставания (в днях) для соответствующего филиала в конкретном регионе.

**Результаты:**

- **Регион R1:**
  - Филиал B1: Отставание - 0 дней
  - Филиал B2: Отставание - 0 дней
  - Филиал B3: Отставание - 0 дней
  - Филиал A1: Отставание - 6744 дня

- **Регион R2:**
  - Филиал B1: Отставание - 15702 дня
  - Филиал B2: Отставание - 1468 дней
  - Филиал B3: Отставание - 1628 дней
  - Филиал A2: Отставание - 78767 дней

- **Регион R3:**
  - Филиал C1: Отставание - 117888 дней
  - Филиал C2: Отставание - 7430 дней
  - Филиал C3: Отставание - 8 дней
  - Филиал A3: Отставание - 471 день

- **Регион R4:**
  - Филиал D1: Отставание - 1402 дня
  - Филиал D2: Отставание - 2036 дней
  - Филиал D3: Отставание - 110 дней

- **Регион R5:**
  - Филиал E1: Отставание - 6459 дней
  - Филиал E2: Отставание - 211 дней
  - Филиал E3: Отставание - 828 дней

Таким образом, таблица позволяет оценить общее отставание по каждому филиалу в каждом из регионов.
'''
st.markdown(text_12)

# 4.2
# Выберем нужные столбцы
selected_columns = ['Регион', 'Филиал', 'Базовая станция', 'Прогноз интеграции в сеть П', 'Интеграция в сеть П']
# Уберем строки с пропущенными значениями в столбцах с датами
integration_data = df[selected_columns].dropna(subset=['Прогноз интеграции в сеть П', 'Интеграция в сеть П'])
# Определим отставание от плана
integration_data['Отставание'] = (integration_data['Интеграция в сеть П'] - integration_data['Прогноз интеграции в сеть П']).dt.days
# Выберем базовые станции с отставанием от плана
delayed_stations = integration_data[integration_data['Отставание'] > 0]
# Построим график
fig = px.bar(delayed_stations, x='Базовая станция', y='Отставание', color='Филиал',
            title='Отставание от плановых сроков интеграции по базовым станциям и филиалам',
            labels={'Отставание': 'Отставание от плана (в днях)', 'Базовая станция': 'Базовая станция'},
            category_orders={'Базовая станция': delayed_stations['Базовая станция'].unique()})
# Настройка макета графика
fig.update_layout(xaxis_title='Базовая станция', 
                  yaxis_title='Отставание от плана (в днях)',
                  legend_title='Филиал')
fig.update_traces(dict(marker_line_width=0))
# Отображаем график
st.plotly_chart(fig)
text_14 = '''
Анализ на основе предоставленной таблицы демонстрирует количество случаев отставания от плановых сроков интеграции в сеть по филиалам.

Рассмотрим каждый филиал по отдельности:

- В филиале B1 наблюдаются 216 случаев выполнения интеграции по плану и 84 случая отставания от плана.

- В филиале B2 есть 37 случаев выполнения интеграции по плану и 46 случаев отставания от плана.

- В филиале B3 имеются 27 случаев выполнения интеграции по плану и 44 случая отставания от плана.

- В филиале C1 наблюдаются 1334 случая выполнения интеграции по плану и 88 случаев отставания от плана.

- В филиале C2 имеются 17 случаев выполнения интеграции по плану и 547 случаев отставания от плана.

- В филиале C3 наблюдается 2 случая выполнения интеграции по плану и 0 случаев отставания от плана.

- В филиале D1 имеются 24 случая выполнения интеграции по плану и 40 случаев отставания от плана.

- В филиале D2 наблюдаются 34 случая выполнения интеграции по плану и 44 случая отставания от плана.

- В филиале D3 наблюдается 1 случай выполнения интеграции по плану и 2 случая отставания от плана.

- В филиале E1 наблюдаются 3 случая выполнения интеграции по плану и 140 случаев отставания от плана.

- В филиале E2 имеются 2 случая выполнения интеграции по плану и 4 случая отставания от плана.

- В филиале E3 наблюдается 1 случай выполнения интеграции по плану и 26 случаев отставания от плана.

- В филиале А1 наблюдаются 76 случаев выполнения интеграции по плану и 62 случая отставания от плана.

- В филиале А2 есть 821 случай выполнения интеграции по плану и 18 случаев отставания от плана.

- В филиале А3 наблюдается 13 случаев выполнения интеграции по плану и 0 случаев отставания от плана.

Анализируя эти данные, можно сделать вывод, что отставание от плана интеграции в сеть различается от филиала к филиалу. Некоторые филиалы показывают высокий уровень отставания от плана, в то время как другие филиалы успешно справляются с выполнением интеграции по плану. Для филиалов с высоким уровнем отставания от плана необходимо исследовать причины задержек и разработать меры по улучшению процесса интеграции, чтобы достичь заданных плановых сроков.

'''
st.markdown(text_14)

st.markdown(':orange[**5. Подготовить визуализацию (Dashboard) план/факт для Ключевых КТ (предложить варианты представления данных, определить оптимальный вариант).**]')
st.markdown('- Количество интеграций в сеть по типам работ: Столбчатая диаграмма, где по оси X типы работ, а по оси Y количество интеграций в сеть.')
st.markdown('- Статус интеграции в сеть по подрядчикам: Гистограмма, где каждый сектор представляет собой долю интеграций, выполненных каждым подрядчиком.')
st.markdown('- Прогноз интеграции в сеть по плану: Гистограмма, показывающая разницу между прогнозируемой и фактической датой интеграции в сеть.')
# 5.1
# Выбираем нужные столбцы
selected_columns = ['Тип работ', 'Интеграция в сеть П', 'Регион']

# Убираем строки с пропущенными значениями в столбце с датами
integration_data = df[selected_columns].dropna(subset=['Интеграция в сеть П'])

# Группируем по типам работ и регионам, считаем количество интеграций в сеть
integration_by_work_type_region = integration_data.groupby(['Тип работ', 'Регион']).size().reset_index(name='Количество интеграций')

# Строим столбчатую диаграмму
fig = px.bar(integration_by_work_type_region, x='Тип работ', y='Количество интеграций', color='Регион',
            title='Количество интеграций в сеть по типам работ и регионам',
            labels={'Тип работ': 'Тип работ', 'Количество интеграций': 'Количество интеграций', 'Регион': 'Регион'})

# Настройка макета графика
fig.update_layout(xaxis_title='Тип работ', yaxis_title='Количество интеграций')
st.plotly_chart(fig)

text_15 = '''
Анализируя таблицу, можно заметить следующее:

- В каждом регионе присутствуют и тип работы "Модернизация", и тип работы "Строительство".
- В регионах R1, R2, R3, R4, R5 количество интеграций в сеть для типа работ "Модернизация" составляет соответственно: 973, 336, 1943, 29, 152.
- В регионах R1, R2, R3, R4, R5 количество интеграций в сеть для типа работ "Строительство" составляет соответственно: 84, 118, 45, 116, 24.

'''
st.markdown(text_15)

# 5.2
# Выбираем нужные столбцы
selected_columns = ['Подрядчик', 'Интеграция в сеть П']
# Убираем строки с пропущенными значениями в столбце с датами
integration_data = df[selected_columns].dropna(subset=['Интеграция в сеть П'])
# Группируем по подрядчикам и считаем количество интеграций в сеть
integration_by_contractor = integration_data.groupby('Подрядчик').size().reset_index(name='Количество интеграций')
# Строим горизонтальную столбчатую диаграмму
fig = px.bar(integration_by_contractor, x='Количество интеграций', y='Подрядчик',
            orientation='h', title='Статус интеграции в сеть по подрядчикам',
            labels={'Подрядчик': 'Подрядчик', 'Количество интеграций': 'Количество интеграций'})
# Отображаем график
st.plotly_chart(fig)
text_16 = '''
- Подрядчик "ПО27" имеет наибольшее количество интеграций в сеть (1097), что делает его самым активным подрядчиком в этом отношении.
- Подрядчики "ПО2", "ПО23" и "ПО33" также имеют значительное количество интеграций в сеть, соответственно 328, 252 и 511.
- С другой стороны, некоторые подрядчики имеют небольшое количество интеграций в сеть, например "ПО1", "ПО10", "ПО15" и "ПО36".
- Большинство подрядчиков имеют относительно небольшое количество интеграций в сеть, варьирующееся от 1 до 171 интеграции.
'''
st.markdown(text_16)

# 5.3
# Выбираем нужные столбцы
selected_columns = ['Прогноз интеграции в сеть П', 'Интеграция в сеть П']
# Убираем строки с пропущенными значениями в столбцах с датами
integration_data = df[selected_columns].dropna(subset=['Прогноз интеграции в сеть П', 'Интеграция в сеть П'])
# Определяем разницу между прогнозируемой и фактической датой интеграции
integration_data['Разница'] = (integration_data['Интеграция в сеть П'] - integration_data['Прогноз интеграции в сеть П']).dt.days
# Строим гистограмму
fig = px.histogram(integration_data, x='Разница', title='Разница между прогнозируемой и фактической датой интеграции в сеть',
                  labels={'Разница': 'Разница в днях'}).update_layout(yaxis_title='Количество записей')
# Отображаем график
st.plotly_chart(fig)
text_17 = '''
Результаты анализа показывают, что для 89 записей прогнозируемая и фактическая даты интеграции в сеть полностью совпадают, то есть разница между ними составляет 0 дней. Это говорит о том, что в этих случаях интеграция в сеть произошла точно в ожидаемое время.
'''
st.markdown(text_17)

st.markdown(':orange[**6. Спрогнозировать выполнение плана интеграции БС и сайтов по регионам/филиалам на конец 2022 года, указать влияющие факторы на достижение 100 % результата.**]')
st.markdown('[Ссылка на сайт с прогнозом (машинное обучение)](https://mobile-web-prediction.streamlit.app)')
st.markdown(':orange[**7. Какие метрики дополнительно целесообразно периодически анализировать (помимо ключевых КТ) и почему?**]')
answer = '''

1. **Процент завершенности по контрольным точкам (КТ):**
   - **Описание:** Рассчитывается как отношение фактически выполненной работы к запланированной работе по каждой контрольной точке.
   - **Почему важно:** Позволяет оценить, насколько успешно выполняются плановые работы. Высокий процент завершенности может указывать на хорошее выполнение планов, в то время как низкий процент может свидетельствовать о возможных задержках или проблемах в процессе.

2. **Время выполнения каждой контрольной точки:**
   - **Описание:** Рассчитывается как разница между фактическим и запланированным временем выполнения каждой КТ.
   - **Почему важно:** Позволяет выявить, есть ли задержки в выполнении отдельных этапов процесса. Это может помочь в определении причин задержек и принятии корректирующих мер.

3. **Количество отклонений от плана:**
   - **Описание:** Подсчитывается количество раз, когда фактические значения контрольных точек отличаются от плановых.
   - **Почему важно:** Позволяет выявить области, где планы не соответствуют реальным результатам, и принять меры для коррекции.

4. **Среднее время задержек:**
   - **Описание:** Рассчитывается как среднее время задержек между фактическим и плановым временем выполнения.
   - **Почему важно:** Позволяет оценить, насколько часто и насколько существенны задержки в процессе строительства. Это может быть полезным для определения причин задержек и улучшения планирования.

5. **Процент завершенности по регионам и подрядчикам:**
   - **Описание:** Рассчитывается процент завершенности работ для каждого региона и подрядчика.
   - **Почему важно:** Позволяет выявить различия в выполнении планов между разными регионами или подрядчиками. Это может быть полезным для оптимизации распределения ресурсов и повышения эффективности.

'''
st.markdown(answer)
